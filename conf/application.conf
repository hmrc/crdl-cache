# Copyright 2025 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = crdl-cache

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"

# Play Modules
play.modules.enabled += "uk.gov.hmrc.crdlcache.config.Module"

play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
}

# Microservice specific config

play.assets {
  path = "/public"
  urlPrefix = ""
}

mongodb {
  uri = "mongodb://localhost:27017/crdl-cache"
}

import-codelists {
  schedule = "0 0 4 * * ?"

  last-updated-date {
    default = "2025-03-12"
  }

  codelists = [
    {
      code = "BC01"
      origin = "SEED"
      keyProperty = "EvidenceTypeCode"
    }
    {
      code = "BC03"
      origin = "SEED"
      keyProperty = "AcoActionNotPossibleReasonCode"
    }
    {
      code = "BC08"
      origin = "SEED"
      keyProperty = "CountryCode"
    }
    {
      code = "BC09"
      origin = "SEED"
      keyProperty = "RefusalReasonCode"
    }
    {
      code = "BC11"
      origin = "SEED"
      keyProperty = "NationalAdministrationCode"
    }
    {
      code = "BC12"
      origin = "SEED"
      keyProperty = "LanguageCode"
    }
    {
      code = "BC15"
      origin = "SEED"
      keyProperty = "EventTypeCode"
    }
    {
      code = "BC17"
      origin = "SEED"
      keyProperty = "KindOfPackages"
    }
    {
      code = "BC22"
      origin = "SEED"
      keyProperty = "AlertOrRejectionOfMovementReasonCode"
    }
    {
      code = "BC26"
      origin = "SEED"
      keyProperty = "ReasonForInterruptionCode"
    }
    {
      code = "BC34"
      origin = "SEED"
      keyProperty = "SubmittingPersonCode"
    }
    {
      code = "BC35"
      origin = "SEED"
      keyProperty = "TransportUnitCode"
    }
    {
      code = "BC36"
      origin = "SEED"
      keyProperty = "ExciseProductCode"
    }
    {
      code = "BC37"
      origin = "SEED"
      keyProperty = "CnCode"
    }
    {
      code = "BC40"
      origin = "SEED"
      keyProperty = "WineGrowingZoneCode"
    }
    {
      code = "BC41"
      origin = "SEED"
      keyProperty = "WineOperationCode"
    }
    {
      code = "BC43"
      origin = "SEED"
      keyProperty = "CancellationReasonCode"
    }
    {
      code = "BC66"
      origin = "SEED"
      keyProperty = "ExciseProductsCategoryCode"
    }
    {
      code = "BC106"
      origin = "SEED"
      keyProperty = "DocumentType"
    }
    {
      code = "BC109"
      origin = "SEED"
      keyProperty = "NationalAdministrationDegreePlatoCode"
    }
    {
      code = "CL239"
      origin = "CSRD2"
      keyProperty = "AdditionalInformationCode"
    }
    {
      code = "CL380"
      origin = "CSRD2"
      keyProperty = "DocumentType"
    }
  ]
}

import-offices {
  schedule = "0 0 4 * * ?"
}

microservice {
  services {
    dps-api {
      host = localhost
      port = 7253
      ref-data-path = "crdl-ref-data-dps-stub/iv_crdl_reference_data"
      customs-offices-path = "crdl-ref-data-dps-stub/iv_crdl_customs_office"
      clientId = "client_id_must_be_set_in_app-config-xxx"
      clientSecret = "client_secret_must_be_set_in_app-config-xxx"

      # # Use for local testing with the real HIP API:
      # protocol = "https"
      # host = "admin.qa.tax.service.gov.uk"
      # port = 443
      # ref-data-path = "hip/crdl/views/iv_crdl_reference_data"
      # customs-offices-path = "hip/crdl/views/iv_crdl_customs_office"
      # # The following environment variables must be set using credentials from Integration Hub:
      # clientId = ${CLIENT_ID}
      # clientSecret = ${CLIENT_SECRET}
    }
  }
}

